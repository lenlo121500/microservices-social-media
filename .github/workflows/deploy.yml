name: Deploy Changed Services to Render

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          # Fetch enough history for git diff to work
          fetch-depth: 2

      - name: Get Changed Files
        id: changes
        run: |
          echo "::group::Getting changed files"

          # Handle different scenarios
          if [ "${{ github.event.before }}" == "0000000000000000000000000000000000000000" ]; then
            echo "Initial commit detected - deploying all services"
            CHANGED="api-gateway/ identity-service/ post-service/ media-service/ search-service/"
          elif [ -z "${{ github.event.before }}" ]; then
            echo "No previous commit - comparing with HEAD~1"
            CHANGED=$(git diff --name-only HEAD~1 HEAD || echo "api-gateway/ identity-service/ post-service/ media-service/ search-service/")
          else
            echo "Comparing ${{ github.event.before }} with ${{ github.sha }}"
            CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} || echo "")
          fi

          echo "Changed files:"
          echo "$CHANGED"
          echo "$CHANGED" > changed_files.txt
          echo "::endgroup::"

      - name: Set Deployment Flags
        id: setflags
        run: |
          CHANGED=$(cat changed_files.txt)

          echo "::group::Setting deployment flags"

          # Initialize all flags to false
          echo "deploy_gateway=false" >> $GITHUB_ENV
          echo "deploy_identity=false" >> $GITHUB_ENV
          echo "deploy_post=false" >> $GITHUB_ENV
          echo "deploy_media=false" >> $GITHUB_ENV
          echo "deploy_search=false" >> $GITHUB_ENV

          # Check for changes in each service
          if echo "$CHANGED" | grep -q "^api-gateway/"; then
            echo "‚úÖ API Gateway changed - will deploy"
            echo "deploy_gateway=true" >> $GITHUB_ENV
          else
            echo "‚ùå API Gateway unchanged - skipping"
          fi

          if echo "$CHANGED" | grep -q "^identity-service/"; then
            echo "‚úÖ Identity Service changed - will deploy"
            echo "deploy_identity=true" >> $GITHUB_ENV
          else
            echo "‚ùå Identity Service unchanged - skipping"
          fi

          if echo "$CHANGED" | grep -q "^post-service/"; then
            echo "‚úÖ Post Service changed - will deploy"
            echo "deploy_post=true" >> $GITHUB_ENV
          else
            echo "‚ùå Post Service unchanged - skipping"
          fi

          if echo "$CHANGED" | grep -q "^media-service/"; then
            echo "‚úÖ Media Service changed - will deploy"
            echo "deploy_media=true" >> $GITHUB_ENV
          else
            echo "‚ùå Media Service unchanged - skipping"
          fi

          if echo "$CHANGED" | grep -q "^search-service/"; then
            echo "‚úÖ Search Service changed - will deploy"
            echo "deploy_search=true" >> $GITHUB_ENV
          else
            echo "‚ùå Search Service unchanged - skipping"
          fi

          echo "::endgroup::"

      - name: Deploy API Gateway
        if: env.deploy_gateway == 'true'
        run: |
          echo "üöÄ Deploying API Gateway..."
          curl -X POST "${{ secrets.RENDER_DEPLOY_GATEWAY }}" \
            -H "Accept: application/json" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            --fail-with-body \
            --retry 3 \
            --retry-delay 5 || {
              echo "‚ùå Failed to deploy API Gateway"
              exit 1
            }
          echo "‚úÖ API Gateway deployed successfully"

      - name: Deploy Identity Service
        if: env.deploy_identity == 'true'
        run: |
          echo "üöÄ Deploying Identity Service..."
          curl -X POST "${{ secrets.RENDER_DEPLOY_IDENTITY }}" \
            -H "Accept: application/json" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            --fail-with-body \
            --retry 3 \
            --retry-delay 5 || {
              echo "‚ùå Failed to deploy Identity Service"
              exit 1
            }
          echo "‚úÖ Identity Service deployed successfully"

      - name: Deploy Post Service
        if: env.deploy_post == 'true'
        run: |
          echo "üöÄ Deploying Post Service..."
          curl -X POST "${{ secrets.RENDER_DEPLOY_POST }}" \
            -H "Accept: application/json" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            --fail-with-body \
            --retry 3 \
            --retry-delay 5 || {
              echo "‚ùå Failed to deploy Post Service"
              exit 1
            }
          echo "‚úÖ Post Service deployed successfully"

      - name: Deploy Media Service
        if: env.deploy_media == 'true'
        run: |
          echo "üöÄ Deploying Media Service..."
          curl -X POST "${{ secrets.RENDER_DEPLOY_MEDIA }}" \
            -H "Accept: application/json" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            --fail-with-body \
            --retry 3 \
            --retry-delay 5 || {
              echo "‚ùå Failed to deploy Media Service"
              exit 1
            }
          echo "‚úÖ Media Service deployed successfully"

      - name: Deploy Search Service
        if: env.deploy_search == 'true'
        run: |
          echo "üöÄ Deploying Search Service..."
          curl -X POST "${{ secrets.RENDER_DEPLOY_SEARCH }}" \
            -H "Accept: application/json" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            --fail-with-body \
            --retry 3 \
            --retry-delay 5 || {
              echo "‚ùå Failed to deploy Search Service"
              exit 1
            }
          echo "‚úÖ Search Service deployed successfully"

      - name: Deployment Summary
        if: always()
        run: |
          echo "::group::Deployment Summary"
          echo "API Gateway: ${{ env.deploy_gateway }}"
          echo "Identity Service: ${{ env.deploy_identity }}"
          echo "Post Service: ${{ env.deploy_post }}"
          echo "Media Service: ${{ env.deploy_media }}"
          echo "Search Service: ${{ env.deploy_search }}"
          echo "::endgroup::"
